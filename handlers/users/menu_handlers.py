from functools import wraps
from typing import Union

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

from handlers.users.states import NewScreenshot, WriteToAdmins
from keyboards.inline.menu_keyboards import tests_keyboard, exercises_keyboard, screenshots_keyboard, \
    menu_cd, first_keyboard, earn_keyboard, make_callback_data, confirm_entrance_keyboard, not_enough_money_keyboard, \
    confirm_exit_keyboard, answer_keyboard
from loader import dp, bot
from utils.db_api.db_commands import get_referrals, get_referral_link, get_screenshot, get_screenshots, get_test_name, \
    change_money, get_user, check_money, get_tests, get_exercise, get_test_code, get_exercise_code, get_referral_status, \
    activate_referal, vidminok, get_unchaked_screenshots
from utils.db_api.models import Screenshots
from data.config import ADMIN_CHAT_ID, admins
import asyncio

@dp.message_handler(chat_type=types.ChatType.GROUP, is_reply=True, commands=["b"], content_types=types.ContentType.TEXT)
async def group_change_money(message: types.Message):
    user = types.User.get_current().id
    if str(user) in admins:
        if message.chat.id == int(ADMIN_CHAT_ID):
            if message.reply_to_message != None and message.reply_to_message.forward_from != None:
                
                user_mess_id = message.reply_to_message.forward_from.id
                
                async def command_b_changeUserBalance(money_to_change):
                    await change_money(money_to_change, user_mess_id)
                    user = await get_user(user_mess_id)

                    if money_to_change<0:
                        try: 
                            await bot.send_message(chat_id=user_mess_id, text='–° —Ç–≤–æ–µ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–æ —Å–Ω—è—Ç–æ '+await vidminok(money_to_change)+' –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: '+await vidminok(user.balance))
                        except:pass 
                    else:
                        try:   
                            await bot.send_message(chat_id=user_mess_id, text='–ù–∞ —Ç–≤–æ–π —Å—á—ë—Ç –ø–æ—Å—Ç—É–ø–∏–ª–æ '+await vidminok(money_to_change)+' –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: '+await vidminok(user.balance))
                        except:pass 
                    text = '–ë–∞–ª–∞–Ω—Å ' + '<a href="tg://user?id=' + str(
                            user.tg_id) + '">' + user.full_name + '</a>' + ' = ' + user.balance + ' (' + str(money_to_change) + ')'
                    await message.reply(text=text)
                    
                try:
                    message_array = message.text.split(" ")
                    money_to_change = int(message_array[-1])
                    await command_b_changeUserBalance(money_to_change)
                except: 
                    await message.reply(text='–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É')


@dp.message_handler(commands=["b"], content_types=types.ContentType.TEXT)
async def change_money_b(message: types.Message):
    user = types.User.get_current().id
    if str(user) in admins:
        mess = message.text
        messArray = mess.split(" ")
        try:
            user_db = await get_user(int(messArray[1]))

            if user_db!= None:
                async def command_b_changeUserBalance(money_to_change, user_db):
                    await change_money(money_to_change, user_db.tg_id)

                    if money_to_change < 0:
                        try:
                            await bot.send_message(chat_id=user_db.tg_id,
                                                   text='–° —Ç–≤–æ–µ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–æ —Å–Ω—è—Ç–æ ' + await vidminok(
                                                       money_to_change) + ' –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ' + await vidminok(
                                                       user_db.balance))
                        except:
                            pass
                    else:
                        try:
                            await bot.send_message(chat_id=user_db.tg_id,
                                                   text='–ù–∞ —Ç–≤–æ–π —Å—á—ë—Ç –ø–æ—Å—Ç—É–ø–∏–ª–æ ' + await vidminok(
                                                       money_to_change) + ' –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ' + await vidminok(
                                                       user_db.balance))
                        except:
                            pass
                    text = '–ë–∞–ª–∞–Ω—Å ' + '<a href="tg://user?id=' + str(
                        user_db.tg_id) + '">' + user_db.full_name + '</a>' + ' = ' + user_db.balance + ' (' + str(
                        money_to_change) + ')'
                    await message.reply(text=text)

                try:
                    message_array = message.text.split(" ")
                    money_to_change = int(message_array[-1])
                    await command_b_changeUserBalance(money_to_change, user_db)
                except:
                    await message.reply(text='–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É')
            else:
                await message.reply(text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã - /b tg_id money')
        except:
            await message.reply(text='–û—à–∏–±–∫–∞ —Å telegram id')



                


@dp.message_handler(chat_type=types.ChatType.GROUP, is_reply=True, content_types=types.ContentType.TEXT)
async def group(message: types.Message):
    user = types.User.get_current().id
    if str(user) in admins:
        if message.chat.id == int(ADMIN_CHAT_ID):
            if message.reply_to_message != None and message.reply_to_message.forward_from != None:
                user_mess_id = message.reply_to_message.forward_from.id
                await bot.send_message(chat_id=user_mess_id, text=message.text,
                                       reply_to_message_id=message.reply_to_message.forward_from_message_id)
                await message.reply(text="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üïä")


@dp.message_handler(chat_type=types.ChatType.GROUP, is_reply=True, content_types=types.ContentType.STICKER)
async def groupp(message: types.Message):
    user = types.User.get_current().id
    if str(user) in admins:
        if message.chat.id == int(ADMIN_CHAT_ID):
            if message.reply_to_message != None and message.reply_to_message.forward_from != None:
                user_mess_id = message.reply_to_message.forward_from.id
                sticker = message.sticker.file_id
                await bot.send_sticker(chat_id=user_mess_id, sticker=sticker)
                await message.reply(text="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üïä")


@dp.message_handler(chat_type=types.ChatType.GROUP, is_reply=True, content_types=types.ContentType.PHOTO)
async def grouppp(message: types.Message):
    user = types.User.get_current().id
    if str(user) in admins:
        if message.chat.id == int(ADMIN_CHAT_ID):
            if message.reply_to_message != None and message.reply_to_message.forward_from != None:
                user_mess_id = message.reply_to_message.forward_from.id
                photo = message.photo[-1].file_id
                text = message.caption

                await bot.send_photo(photo=photo, caption=text, chat_id=user_mess_id)
                await message.reply(text="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üïä")


@dp.message_handler(chat_type=types.ChatType.GROUP)
async def group_ignore(message: types.Message):
    pass


@dp.message_handler(commands=["cancel"], state=NewScreenshot)
async def cancel(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())
    await state.reset_state()
    await show_menu(message)


@dp.message_handler(commands=["cancel"], state=WriteToAdmins.Text)
async def cancel_write(message: types.Message, state: FSMContext):
    await state.reset_state()
    await show_menu(message)

@dp.message_handler(commands=["menu"], state=WriteToAdmins.Text)
async def cancel_write(message: types.Message, state: FSMContext):
    await state.reset_state()
    await show_menu(message)


@dp.message_handler(Command("send_photo"))
async def send_photo_choose_test(message: Union[types.Message, types.CallbackQuery]):
    text = "‚û° –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –º—É–¥–ª–∞.\n–ï—Å–ª–∏ —Ç–≤–æ–µ–π —Ç–µ–º—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ù–æ–≤–∞—è —Ç–µ–º–∞'"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    tests = await get_tests()
    for test in tests:
        keyboard.add(test.test_name)
    keyboard.add("–ù–æ–≤–∞—è —Ç–µ–º–∞")
    if type(message) == types.Message:
        await message.answer(text=text, reply_markup=keyboard)
    else:
        try:
            await message.message.delete()
        except:
            pass
        await message.message.answer(text=text, reply_markup=keyboard)
    await NewScreenshot.Test.set()


@dp.message_handler(state=NewScreenshot.Test)
async def send_photo_choose_exercise(message: types.Message, state: FSMContext):
    test_name = message.text
    if (test_name == "–ù–æ–≤–∞—è —Ç–µ–º–∞"):
        await message.answer(text="–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã")
        return
    screenshot = Screenshots()
    screenshot.test_name = test_name
    test_code = await get_test_code(test_name)
    screenshot.test_code = test_code
    text = "‚û° –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è.\n–ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä'"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    exercises = await get_exercise(test_code)
    listOfStr = []
    listOfInt = [[], [], []]
    for i in range(len(exercises)):
        if exercises[i].exercise_name.isdigit():
            count = 0
            for j in exercises[i].exercise_name:
                count += 1
            listOfInt[count].append(exercises[i])
        else:
            listOfStr.append(exercises[i])
    listOfInt[0].sort(key=lambda x: x.exercise_name)
    listOfInt[1].sort(key=lambda x: x.exercise_name)
    listOfInt[2].sort(key=lambda x: x.exercise_name)
    listOfStr.sort(key=lambda x: x.exercise_name)
    exercises = listOfInt[0] + listOfInt[1] + listOfInt[2] + listOfStr
    for exercise in exercises:
        keyboard.add(exercise.exercise_name)
    keyboard.add("–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä")
    await message.answer(text=text, reply_markup=keyboard)
    await NewScreenshot.Exercise.set()
    await state.update_data(screenshot=screenshot)


@dp.message_handler(state=NewScreenshot.Exercise)
async def send_photo_choose_photo(message: types.Message, state: FSMContext):
    exercise_name = message.text
    if (exercise_name == "–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä"):
        await message.answer(text="‚û° –ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è")
        return
    data = await state.get_data()
    screenshot: Screenshots = data.get("screenshot")
    screenshot.exercise_name = exercise_name
    exercise_code = await get_exercise_code(exercise_name, screenshot.test_code)
    screenshot.exercise_code = exercise_code
    text = "‚û° –ü—Ä–∏—à–ª–∏ —Å–≤–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–¥–∞–Ω–∏—è\n–í—ã—à–µ –ø—Ä–∏–º–µ—Ä –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–ª—É—á–∏—à—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª (–Ω–∞ –Ω–µ–º –≤–∏–¥–Ω–æ –≤—Å—ë –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –≤–∏–¥–µ–Ω –±–∞–ª –∑–∞ –∑–∞–¥–∞–Ω–∏–µ –∏ –≥–∞–ª–æ—á–∫–∞. –ù–æ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ)\n‚û° –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–µ–≥–æ —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /cancel"
    await message.answer_photo(caption=text, reply_markup=ReplyKeyboardRemove(),
                               photo="AgACAgIAAxkBAAIT9GBc0avtGDmDknyTaGvZP7G9lIWqAAI8sjEbR9nhSjJ6XryWWI0W6ZOboi4AAwEAAwIAA3gAAxQ5AAIeBA")
    await NewScreenshot.Photo.set()
    await state.update_data(screenshot=screenshot)


@dp.message_handler(state=NewScreenshot.Photo, content_types=types.ContentType.PHOTO)
async def send_photo_confirm(message: types.Message, state: FSMContext):
    photo = message.photo[-1].file_id
    data = await state.get_data()
    screenshot: Screenshots = data.get("screenshot")
    screenshot.photo = photo
    screenshot.isCheck = False
    user = types.User.get_current().id
    if str(user) in admins:
        screenshot.isCheck = True
    text = "–¢–µ–º–∞: {test}\n–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: {exercise}".format(test=screenshot.test_name,
                                                            exercise=screenshot.exercise_name)
    markup = InlineKeyboardMarkup(inline_keyboard=
    [
        [InlineKeyboardButton(text="–î–∞", callback_data="confirm")],
        [InlineKeyboardButton(text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–µ–º–∞", callback_data="change_test")],
        [InlineKeyboardButton(text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è", callback_data="change_exercise")],
        [InlineKeyboardButton(text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ", callback_data="change_photo")]
    ])

    await message.answer_photo(caption=text, photo=photo)
    await message.answer(text="–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=markup)
    await NewScreenshot.Confirm.set()
    await state.update_data(screenshot=screenshot)


@dp.message_handler(state=NewScreenshot.ChangeTest)
async def send_photo_confirm_test(message: types.Message, state: FSMContext):
    test = message.text
    if (test == "–ù–æ–≤–∞—è —Ç–µ–º–∞"):
        await message.answer(text="–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã")
        return
    data = await state.get_data()
    screenshot: Screenshots = data.get("screenshot")
    screenshot.test_name = test
    screenshot.test_code = await get_test_code(test)
    screenshot.exercise_code = await get_exercise_code(exercise_name=screenshot.exercise_name,
                                                       test_code=screenshot.test_code)
    text = "–¢–µ–º–∞: {test}\n–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: {exercise}".format(test=screenshot.test_name,
                                                            exercise=screenshot.exercise_name)
    markup = InlineKeyboardMarkup(inline_keyboard=
    [
        [InlineKeyboardButton(text="–î–∞", callback_data="confirm")],
        [InlineKeyboardButton(text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–µ–º–∞", callback_data="change_test")],
        [InlineKeyboardButton(text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è", callback_data="change_exercise")],
        [InlineKeyboardButton(text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ", callback_data="change_photo")]
    ])

    await message.answer_photo(caption=text, photo=screenshot.photo, reply_markup=ReplyKeyboardRemove())
    await message.answer(text="–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=markup)
    await NewScreenshot.Confirm.set()
    await state.update_data(screenshot=screenshot)


@dp.message_handler(state=NewScreenshot.ChangeExercise)
async def send_photo_confirm_exercise(message: types.Message, state: FSMContext):
    exercise = message.text
    if (exercise == "–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä"):
        await message.answer(text="–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è")
        return
    data = await state.get_data()
    screenshot: Screenshots = data.get("screenshot")
    screenshot.exercise_name = exercise
    screenshot.exercise_code = await get_exercise_code(exercise, screenshot.test_code)
    text = "–¢–µ–º–∞: {test}\n–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: {exercise}".format(test=screenshot.test_name,
                                                            exercise=screenshot.exercise_name)
    markup = InlineKeyboardMarkup(inline_keyboard=
    [
        [InlineKeyboardButton(text="–î–∞", callback_data="confirm")],
        [InlineKeyboardButton(text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–µ–º–∞", callback_data="change_test")],
        [InlineKeyboardButton(text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è", callback_data="change_exercise")],
        [InlineKeyboardButton(text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ", callback_data="change_photo")]
    ])

    await message.answer_photo(caption=text, photo=screenshot.photo, reply_markup=ReplyKeyboardRemove())
    await message.answer(text="–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=markup)
    await NewScreenshot.Confirm.set()
    await state.update_data(screenshot=screenshot)


@dp.callback_query_handler(state=NewScreenshot.Confirm, text_contains="confirm")
async def send_photo_exit(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except:
        pass
    data = await state.get_data()
    screenshot: Screenshots = data.get("screenshot")
    screenshot.author = types.User.get_current().id
    screenshot.isDeleted = False
    await screenshot.create()
    await call.message.answer_sticker(sticker="CAACAgQAAxkBAAIGY1__bX4guaYl8QWzRpvQHgju0EHRAAJ9AAPOOQgNKBlAtyUPuOIeBA")
    if not str(call.message.chat.id) in admins:
        text = "üòç –°–ø–∞—Å–∏–±–æ, —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º. –û–∂–∏–¥–∞–π –Ω–∞–≥—Ä–∞–¥—É..."
    else:
        text = "–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ. –ú–æ–Ω–µ—Ç–∫–∏ —Ç–µ–±–µ –ø—Ä–∏–π–¥—É—Ç... –∫–∞–∫–∏–µ –º–æ–Ω–µ—Ç–∫–∏ –¥—è–¥—è, —Ç—ã –∂ –∞–¥–º–∏–Ω, –∞–ª–ª–µ)"
    markup = InlineKeyboardMarkup(inline_keyboard=
    [
        [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥—Ä—É–≥–æ–≥–æ –∑–∞–¥–∞–Ω–∏–∏—è", callback_data="new_exercise")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_menu")],
    ])
    await call.message.answer(text=text, reply_markup=markup)
    size = len(await get_unchaked_screenshots())
    if not str(call.message.chat.id) in admins:
        for admin in admins:
            await bot.send_message(chat_id=admin, text="–í –ø—Ä–µ–¥–ª–æ–∂–∫–µ —Å–∫—Ä–∏–Ω–æ–≤: "+str(size)+" üì•")


@dp.callback_query_handler(text_contains="new_exercise", state=NewScreenshot.Confirm)
async def send_photo_new_exercise(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    data = await state.get_data()
    screenshot: Screenshots = data.get("screenshot")
    text = "‚û° –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è.\n–ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä'"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    exercises = await get_exercise(screenshot.test_code)
    listOfStr = []
    listOfInt = [[], [], []]
    for i in range(len(exercises)):
        if exercises[i].exercise_name.isdigit():
            count = 0
            for j in exercises[i].exercise_name:
                count += 1
            listOfInt[count].append(exercises[i])
        else:
            listOfStr.append(exercises[i])
    listOfInt[0].sort(key=lambda x: x.exercise_name)
    listOfInt[1].sort(key=lambda x: x.exercise_name)
    listOfInt[2].sort(key=lambda x: x.exercise_name)
    listOfStr.sort(key=lambda x: x.exercise_name)
    exercises2 = listOfInt[0] + listOfInt[1] + listOfInt[2] + listOfStr
    for exercise in exercises2:
        keyboard.add(exercise.exercise_name)
    keyboard.add("–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä")
    await call.message.answer(text=text, reply_markup=keyboard)
    await NewScreenshot.Exercise.set()


@dp.callback_query_handler(text_contains="to_menu", state=NewScreenshot.Confirm)
async def send_photo_to_menu(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await state.reset_state()
    await show_menu(call.message)


@dp.callback_query_handler(text_contains="change_test", state=NewScreenshot.Confirm)
async def send_photo_change_test(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except:
        pass
    text = "‚û° –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –º—É–¥–ª–∞.\n–ï—Å–ª–∏ —Ç–≤–æ–µ–π —Ç–µ–º—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ù–æ–≤–∞—è —Ç–µ–º–∞'"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    tests = await get_tests()
    for test in tests:
        keyboard.add(test.test_name)
    keyboard.add("–ù–æ–≤–∞—è —Ç–µ–º–∞")
    await call.message.answer(text=text, reply_markup=keyboard)
    await NewScreenshot.ChangeTest.set()


@dp.callback_query_handler(text_contains="change_exercise", state=NewScreenshot.Confirm)
async def send_photo_change_exercise(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except:
        pass
    data = await state.get_data()
    screenshot: Screenshots = data.get("screenshot")
    test_code = screenshot.test_code
    text = "‚û° –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è.\n–ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä'"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    exercises = await get_exercise(test_code)
    listOfStr = []
    listOfInt = [[], [], []]
    for i in range(len(exercises)):
        if exercises[i].exercise_name.isdigit():
            count = 0
            for j in exercises[i].exercise_name:
                count += 1
            listOfInt[count].append(exercises[i])
        else:
            listOfStr.append(exercises[i])
    listOfInt[0].sort(key=lambda x: x.exercise_name)
    listOfInt[1].sort(key=lambda x: x.exercise_name)
    listOfInt[2].sort(key=lambda x: x.exercise_name)
    listOfStr.sort(key=lambda x: x.exercise_name)
    exercises = listOfInt[0] + listOfInt[1] + listOfInt[2] + listOfStr
    for exercise in exercises:
        keyboard.add(exercise.exercise_name)
    keyboard.add("–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä")
    await call.message.answer(text=text, reply_markup=keyboard)
    await NewScreenshot.ChangeExercise.set()


@dp.callback_query_handler(text_contains="change_photo", state=NewScreenshot.Confirm)
async def send_photo_change_photo(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except:
        pass
    text = "‚û° –ü—Ä–∏—à–ª–∏ —Å–≤–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–¥–∞–Ω–∏—è.\n‚û° –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–µ–≥–æ —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏ /cancel"
    await call.message.answer(text=text)
    await NewScreenshot.Photo.set()


def send_action():
    """Sends `action` while processing func command."""

    def decorator(func):
        @wraps(func)
        def command_func(update, context, *args, **kwargs):
            context.bot.send_chat_action(chat_id=update.effective_message.chat_id, action="typing")
            return func(update, context, *args, **kwargs)

        return command_func

    return decorator


@dp.message_handler(Command("referrals"))
async def my_referrals(message: Union[types.Message, types.CallbackQuery]):
    user = types.User.get_current().id
    referrals = await get_referrals(user)
    referral_code = await get_referral_link(user)
    text = "‚û° –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n" + referral_code + "\n–ö–æ–≥–¥–∞ –¥—Ä—É–≥ –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ, –æ–Ω –ø–æ–ª—É—á–∏—Ç 50 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç.\n–¢—ã –ø–æ–ª—É—á–∏—à—å 50 –º–æ–Ω–µ—Ç –∫–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –æ—Ç–∫—Ä–æ–µ—Ç –ª—é–±—É—é —Ç–µ–º—É\n\n"
    if not referrals == []:
        text += "–¢–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n"
        for num, row in enumerate(referrals):
            text += str(num + 1) + ') <a href="tg://user?id=' + str(row.tg_id) + '">' + row.full_name + '</a>\n'
    else:
        text += "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
    if type(message) == types.Message:
        await message.answer(text)
    else:
        markup = InlineKeyboardMarkup(row_width=1)
        markup.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=make_callback_data(level=2, menu_type="2")))
        await message.message.edit_text(text=text, reply_markup=markup)


@dp.message_handler(Command("balance"))
async def my_balance(message: Union[types.Message, types.CallbackQuery]):
    user = types.User.get_current().id
    balance = await check_money(user)
    text = "–ù–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É " + balance + " –º–æ–Ω–µ—Ç."
    if type(message) == types.Message:
        markup = InlineKeyboardMarkup(row_width=1)
        markup.row(
            InlineKeyboardButton(text="–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã üí∞", callback_data=make_callback_data(level=2, menu_type="2")))
        await message.answer(text=text, reply_markup=markup)
    else:
        markup = InlineKeyboardMarkup(row_width=1)
        markup.row(
            InlineKeyboardButton(text="–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã üí∞", callback_data=make_callback_data(level=2, menu_type="2")))
        markup.row(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=make_callback_data(level=0, menu_type="1")))
        await message.message.edit_text(text=text, reply_markup=markup)


@dp.message_handler(Command("menu"))
async def show_menu(message: types.Message):
    await list_first(message)


async def list_first(message: Union[types.Message, types.CallbackQuery], **kwargs):
    markup = await first_keyboard()
    if isinstance(message, types.Message):
        first_name = message['from']['first_name']
        await message.answer("–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, " + first_name + " ‚ú®", reply_markup=markup)
    elif isinstance(message, types.CallbackQuery):
        first_name = message.message['from']['first_name']
        await message.message.edit_text("–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, " + first_name + " ‚ú®", reply_markup=markup)



async def list_first_new(message: Union[types.Message, types.CallbackQuery], **kwargs):
    markup = await first_keyboard()
    #await bot.send_message(393483876,str(message))
    if isinstance(message, types.Message):
        first_name = message['chat']['first_name']
        await message.answer("–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, " + first_name + " ‚ú®", reply_markup=markup)
    elif isinstance(message, types.CallbackQuery):
        first_name = message.message['chat']['first_name']
        await message.message.delete()
        await message.message.answer("–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, " + first_name + " ‚ú®", reply_markup=markup)


async def list_earns(callback: types.CallbackQuery, **kwargs):
    markup = await earn_keyboard()
    user = types.User.get_current().id
    balance = await check_money(user)
    text = "–ù–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É " + await vidminok(balance)+" üí∞\n\n‚û° –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã –º–æ–∂–Ω–æ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:"
    await callback.message.edit_text(text, reply_markup=markup)


async def list_tests(callback: types.CallbackQuery, **kwargs):
    markup = await tests_keyboard()
    user = types.User.get_current().id
    balance = await check_money(user)
    text = "–ù–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É " + await vidminok(balance)+" üí∞\n\n‚û° –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã —Ç–µ—Å—Ç–æ–≤:"
    await callback.message.edit_text(text, reply_markup=markup)


async def not_enaugh_money(callback: types.CallbackQuery, money):
    markup = await not_enough_money_keyboard()
    text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç " + str(money) + " –º–æ–Ω–µ—Ç, —á—Ç–æ–± –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç –∫—É—Ä—Å üò©"
    await callback.message.edit_text(reply_markup=markup, text=text)


async def is_enaugh_to_enter(callback: types.CallbackQuery, test, i, **kwargs):
    user_id = types.User.get_current().id
    user = await get_user(user_id)
    balance = int(user.balance)
    if balance < int(i):
        await not_enaugh_money(callback, int(i) - balance)
    else:
        await confirm_entrance(callback, test, int(i))


async def confirm_entrance(callback: types.CallbackQuery, test, i, **kwargs):
    markup = await confirm_entrance_keyboard(test, i)
    test_name = await get_test_name(test)
    text = "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ–º—É " + test_name + "?\n–° —Ç–≤–æ–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—à–µ—Ç—Å—è <b><u>" + str(
        i) + " –º–æ–Ω–µ—Ç</u></b> üíµ\n<b>–°–∫—Ä–∏–Ω—à–æ—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã 3 —á–∞—Å–∞, —Ç–∞–∫ —á—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∏—Ö —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–∏—à–µ—Ç–µ —Ç–µ—Å—Ç</b>"
    await callback.message.edit_text(reply_markup=markup, text=text)


async def confirm_exit(callback: types.CallbackQuery, test, exercise, i, **kwargs):
    markup = await confirm_exit_keyboard(test=test, exercise=exercise, i=i)
    test_name = await get_test_name(test)
    media = types.InputMediaPhoto(
        "AgACAgIAAxkBAAJKrmByIJ7uUzLtJy0GtS1OWu0efID6AAJGsjEbB3aRSwEl7Fosv9oSI4eHnS4AAwEAAwIAA3kAAzHyAAIeBA")
    text = "‚Åâ –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–º—É " + test_name + "?\n<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω–æ</b>"
    await callback.message.edit_media(reply_markup=markup, media=media)


async def referal_send_message_about_activation(user_id):
    user = await get_user(user_id)
    referal = user.referal
    text = 'üíµ –¢–≤–æ–π –¥—Ä—É–≥ <a href="tg://user?id=' + str(
        user_id) + '">' + user.full_name + '</a> –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ç–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π. –ó–∞ —ç—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 50 –º–æ–Ω–µ—Ç. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –¥—Ä—É–∑–µ–π - —Å–∫–æ–ª—å–∫–æ –∑–∞—Ö–æ—á–µ—à—å.'
    await change_money(money=50, user_id=referal)
    await bot.send_message(chat_id=referal, text=text)


async def list_exercises(callback: types.CallbackQuery, test, money, **kwargs):
    markup = await exercises_keyboard(test)
    user_id = types.User.get_current().id
    await change_money(money, user_id=user_id)
    referal_status = await get_referral_status(user_id=user_id)
    if not referal_status:
        await referal_send_message_about_activation(user_id)
        await activate_referal(user_id=user_id)
    try:
        await callback.message.edit_text("‚û° –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:", reply_markup=markup)
    except:
        pass


async def list_exercises_new(callback: types.CallbackQuery, test, **kwargs):
    markup = await exercises_keyboard(test)
    text = "‚û° –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:"
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer(reply_markup=markup, text=text)


async def list_screenshots(callback: types.CallbackQuery, test, exercise, i, item_id, money, **kwargs):
    user_id = types.User.get_current().id
    await change_money(money, user_id=user_id)
    referal_status = await get_referral_status(user_id=user_id)
    if not referal_status:
        await referal_send_message_about_activation(user_id)
        await activate_referal(user_id=user_id)
    markup = await screenshots_keyboard(test=test, exercise=exercise, i=i)
    photo = await get_screenshots(test_code=test, exercise_code=exercise)
    try:
        await callback.message.delete()
    except:
        await callback.message.edit_text(text="‚§µÔ∏è")
    new_message = await callback.message.answer_photo(reply_markup=markup, photo=photo[int(i)].photo)
    if item_id == 1:
        await start_timer(message=new_message)


async def list_screenshots_edit(callback: types.CallbackQuery, test, exercise, i, **kwargs):
    markup = await screenshots_keyboard(test=test, exercise=exercise, i=i)
    photo = await get_screenshots(test_code=test, exercise_code=exercise)
    media = types.InputMediaPhoto(photo[int(i)].photo)
    try:
        await callback.message.edit_media(reply_markup=markup, media=media)
    except:
        pass


async def start_timer(message: types.Message):
    await asyncio.sleep(10800)
    try:
        await message.delete()
        await list_first_new(message=message)
    except:
        pass


async def write_to_admins(callback: types.CallbackQuery, **kwargs):
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer(
        text="‚û° –í—Å–µ, —á—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å –ø—Ä–∏—à–ª–µ—à—å, –ø–æ–ª—É—á–∞—Ç –∞–¥–º–∏–Ω—ã.\n–ß—Ç–æ –±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å - –Ω–∞–∂–º–∏ /cancel")
    await WriteToAdmins.Text.set()


@dp.message_handler(state=WriteToAdmins.Text, content_types=types.ContentType.ANY)
async def write_to_admins_second(message: types.Message, state: FSMContext):
    await message.forward(chat_id=ADMIN_CHAT_ID)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üïä\n–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.\n–ß—Ç–æ –±—ã –≤—ã–π—Ç–∏ - –Ω–∞–∂–º–∏ /cancel")


@dp.callback_query_handler(menu_cd.filter())
async def navigate(call: types.CallbackQuery, callback_data: dict):
    current_level = callback_data.get('level')
    menu_type = callback_data.get('menu_type')
    test = callback_data.get('test')
    exercise = callback_data.get('exercise')
    item_id = int(callback_data.get('item_id'))
    i = callback_data.get('i')
    money = callback_data.get('money')

    levels = {
        "0": list_first,
        "1": list_tests,
        "2": is_enaugh_to_enter,
        "3": list_exercises,
        "4": list_screenshots,
    }
    if menu_type == "1":

        current_level_function = levels[current_level]

        await current_level_function(
            call, test=test, exercise=exercise, item_id=item_id, menu_type=menu_type, i=i, money=money
        )
    elif menu_type == "2":
        await list_earns(call, menu_type=menu_type)
    elif menu_type == "4":
        await send_photo_choose_test(call)
    elif menu_type == "5":
        await my_referrals(call)
    elif menu_type == "6":
        await list_screenshots_edit(call, test=test, exercise=exercise, i=i, menu_type=menu_type)
    elif menu_type == "7":
        await list_exercises_new(call, test=test)
    elif menu_type == "8":
        await confirm_exit(call, test=test, exercise=exercise, i=i)
    elif menu_type == "3":
        await my_balance(call)
    elif menu_type == "9":
        await write_to_admins(call)
    elif menu_type == "10":
        await list_first_new(call)